# Name of your application. Used to uniquely configure containers.
service: sleeprapp

# Name of the container image.
image: donaldlee50/sleeprapp

# Deploy to these servers.
servers:
  web:
    - 5.78.94.94
  # job:
  #   hosts:
  #     - 5.78.94.94
  #   cmd: bin/jobs
  cron:
    hosts:
      - 5.78.94.94
    cmd:
      bash -c "bundle exec sidekiq"
    env:
      clear:
        RAILS_ENV: production
      secret:
        - REDIS_URL
        - REDIS_PASSWORD
        - SHOPIFY_API_KEY
        - SHOPIFY_API_SECRET

# Enable SSL auto certification via Let's Encrypt (and allow for multiple apps on one server).
# If using something like Cloudflare, it is recommended to set encryption mode 
# in Cloudflare's SSL/TLS setting to "Full" to enable end-to-end encryption. 
proxy: 
  ssl: true
  host: sleeprapp.com
  # kamal-proxy connects to your container over port 80, use `app_port` to specify a different port.
  app_port: 3000

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: donaldlee50
  password:
    - KAMAL_REGISTRY_PASSWORD

# Configure builder setup.
builder:
  arch: amd64

# Inject ENV variables into containers (secrets come from .kamal/secrets).
#
env:
  secret:
    - RAILS_MASTER_KEY
    - DATABASE_URL
    - RAILS_ENV
    - REDIS_URL
    - REDIS_PASSWORD
    - SHOPIFY_API_KEY
    - SHOPIFY_API_SECRET

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
#
aliases:
  # Typical Rails tasks
  console: app exec --interactive --reuse "bin/rails console"
  dbc: app exec --interactive --reuse "bin/rails dbconsole"
  # Generic tasks
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  apps: server exec docker exec kamal-proxy kamal-proxy list

# Use a different ssh user than root
#
# ssh:
#   user: app

# Use a persistent storage volume.
#
# volumes:
#   - "app_storage:/app/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
# asset_path: /app/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
#
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Use accessory services (secrets come from .kamal/secrets).
#
accessories:
  db:
    image: postgres:16
    host: 5.78.94.94
    port: 5432
    env:
      clear:
        POSTGRES_USER: postgres
        POSTGRES_DB: sleeprapp_production
        RAILS_ENV: production
      secret:
        - POSTGRES_PASSWORD
    files:
      - config/init.sql:/docker-entrypoint-initdb.d/setup.sql
    directories:
      - data:/var/lib/postgresql/data
  postgres-backups:
    image: eeshugerman/postgres-backup-s3:16
    host: 5.78.94.94
    env:
      clear:
        SCHEDULE: "29 21 * * *"
        BACKUP_KEEP_DAYS: 7
        S3_REGION: us-east-2
        S3_BUCKET: sleeprapp
        S3_PREFIX: postgres-backups
        POSTGRES_HOST: 5.78.94.94
        POSTGRES_USER: "postgres"
        POSTGRES_DATABASE: "sleeprapp_production"
      secret:
        - POSTGRES_PASSWORD
        - S3_ACCESS_KEY_ID
        - S3_SECRET_ACCESS_KEY
  redis:
    image: redis:7.2
    host: 5.78.94.94
    env:
      clear:
        RAILS_ENV: production
      secret:
        - REDIS_URL
        - REDIS_PASSWORD
    port: 6379
    cmd: "/bin/sh -c 'redis-server --requirepass $REDIS_PASSWORD'"
    directories:
      - data:/data